version: 2.1
orbs: 
  aws-eks: circleci/aws-eks@2.2.0
#  aws-eks: circleci/aws-eks@<<pipeline.parameters.dev-orb-version>>
  kubernetes: circleci/kubernetes@1.3        
jobs:
  envbuild:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/capstonev1
    steps:
      - checkout
# Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
  # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
# run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  deploy-image-docker:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push to Docker Hub
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME:latest .
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $DOCKER_USER/$IMAGE_NAME:latest

  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get pods
          name: Test cluster
  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: nginx-deployment.yaml
          resource-name: deployment/ss-capstone

  create-service:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: nginx-deployment.yaml
          resource-name: service/ss-capstone

  test-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get deployment
          name: Test deployment
workflows:
#  app_prep:
#    jobs:
#      - envbuild
   
#      - deploy-image-docker:
#          requires:
#            - envbuild        
  deployment:
    jobs:
#      - aws-eks/create-cluster:
#          cluster-name: ss-capstone
#      - test-cluster:
 #         cluster-name: ss-capstone
 #         requires:
#            - aws-eks/create-cluster
#      - create-deployment:
#          cluster-name: ss-capstone
#          requires:
#            - test-cluster
      - test-deployment:
          cluster-name: ss-capstone
          requires:
            - create-deployment
      - create-service
          cluster-name: ss-capstone
#      - aws-eks/delete-cluster:
#          cluster-name: ss-capstone
#          requires:
#            - test-cluster